#include <iostream>

class Node {
private:
    int value;  // Wert des Listenelementes
    Node* next; // Zeiger auf das nächste Listenelement (NULL, bei Ende der Liste)

public:
    // Konstruktor: Erzeugen eines Knotens
    Node(int val) : value(val), next(nullptr) {}

    // Destruktor
    ~Node() {}

    // Einfügen eines Knotens an der zweiten Position
    void insert(int val) {
        Node* newNode = new Node(val);
        newNode->next = this->next;
        this->next = newNode;// this -> zugreifen auf akutuell stand von object next
    }

    // Einfügen eines Knotens am Ende der Liste
    void insertEnd(int val) {
        Node* newNode = new Node(val);
        Node* current = this;
        while (current->next) {
            current = current->next;
        }
        current->next = newNode;
    }

    // Einfügen eines Knotens in aufsteigender Reihenfolge
    void insertAscending(int val) {
        Node* newNode = new Node(val);
        Node* current = this;
        while (current->next && current->next->value < val) {
            current = current->next;
        }

        if (current->next == nullptr || current->next->value > val) {
            newNode->next = current->next;
            current->next = newNode;
        } else {
            delete newNode; // Wenn der Wert bereits existiert, nicht einfügen und den allokierten Speicher freigeben
        }
    }

    // Lösche den Knoten mit Wert value
    Node* remove(int val) {
        Node* current = this;
        Node* prev = nullptr;

        while (current && current->value != val) {
            prev = current;
            current = current->next;
        }

        if (current) {
            if (prev) {
                prev->next = current->next;
                delete current;
                return this; // Wenn es kein neues Head-Element gibt, gib das aktuelle Head-Element zurück
            } else {
                Node* newHead = current->next;
                delete current;
                return newHead; // Wenn es ein neues Head-Element gibt, gib dieses zurück
            }
        }

        return this; // Wenn der Wert nicht gefunden wurde, gib das aktuelle Head-Element zurück
    }

    // Länge der Liste
    int length() {
        int count = 0;
        Node* current = this;
        while (current) {
            ++count;
            current = current->next;
        }
        return count;
    }

    // Ausgabe der Liste
    void print() {
        Node* current = this;
        while (current) {
            std::cout << current->value << " ";
            current = current->next;
        }
        std::cout << std::endl;
    }
};

int main() {
    Node* head = new Node(5);
    head->insert(3);
    head->insert(8);
    head->print(); // Output: 5 8 3

    head->insertEnd(10);
    head->insertEnd(1);
    head->print(); // Output: 5 8 3 10 1

    head->insertAscending(4);
    head->insertAscending(7);
    head->print(); // Output: 1 3 4 5 7 8 10

    head = head->remove(8);
    head->print(); // Output: 1 3 4 5 7 10

    delete head; // Free the allocated memory

    return 0;
}
